Briefly summarize the DriverPass project. Who was the client? What type of system did they want you to design?
What did you do particularly well?
If you could choose one part of your work on these documents to revise, what would you pick? How would you improve it?
How did you interpret the user’s needs and implement them into your system design? Why is it so important to consider the user’s needs when designing?
How do you approach designing software? What techniques or strategies would you use in the future to analyze and design a system?

The client was a company called DriverPass, whose purpose was to create resources to help them pass the driver's license test on their  first attempt. They wanted to design a user-level system that could access different types of content. Users can also  schedule face-to-face training and hands-on time with a certified instructor. The system must manage all of this and provide  special features such as disabling packages that the administrator does not want to provide.
  I think this project did an outstanding job of extracting requirements into use cases. I took notes in the interview, turned them into use cases, and outlined the relationship between extension and inclusion. I also specified who can access which features, and I think it worked very well.
  The sequence diagram could be changed. I will study them more  and  make them better. This is because I believe there are two "alternative" sections within the parent's "alternative" section. This represents nested loops in your code,  but I'm not sure if you need to  use them in your sequence diagram. I break this down into individual decisions and try to elaborate on the whole process step by step.
  I started by carefully reading the interview record. I wrote down everything they said  could be interpreted as a result. Once the complete list was ready, I started thinking about how to do this via software or external requirements. If the condition is external, I  set it aside and focus on what is easily applied in the software. When I encountered abstract requirements like "security" in general, I turned to research to find the best solution. Then, I needed to implement them into the design. I tried to break them down into the most basic tasks I could and made use cases for those. Then, I added the include and extended relationships back in to add complexity back in. It is essential to include the user`s needs when designing because you want to build what was requested of you. One example would be the downloadable content available to only certain users in this project. If you don't include a login or hierarchical user system, the content will be downloadable to anyone, destroying the entire reason for providing "premium" content. By keeping the user's needs in mind at design time, you can avoid many redoes later and satisfy your customers.
  When it comes to software development, I'm still new to the whole process. I try to read all  the requirements first, writing  what I think is essential to the  checklist. It then tries to separate the objects in the system and how they interact. Sometimes we use  UML class diagrams, but sometimes we write them down to reach the process diagram before returning to the class diagram. Once you have a process diagram and a class diagram, you can start programming the software. Creating a diagram helps you think about what you might miss if you jump into programming. At school, I'm sometimes busy with time. In these cases, I jump into programming too often. In the future, we will  make heavy use of activity diagrams to sketch how the function works. These are very helpful in ensuring that the process is working as expected.
